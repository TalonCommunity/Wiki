"use strict";(self.webpackChunktalon_wiki=self.webpackChunktalon_wiki||[]).push([[1248],{1706:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"Customization/Talon Framework/talon-framework-overview","title":"Overview of Talon framework","description":"Talon is an accessibility platform that provides a scripting layer to connect a range of input hardware/methods to a cross-platform API for interacting with desktop applications. Let\'s start by talking about where your configuration/scripting files are stored.","source":"@site/docs/Customization/Talon Framework/talon-framework-overview.md","sourceDirName":"Customization/Talon Framework","slug":"/Customization/Talon Framework/talon-framework-overview","permalink":"/Customization/Talon Framework/talon-framework-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/TalonCommunity/Wiki/edit/main/docs/Customization/Talon Framework/talon-framework-overview.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"CustomizationSidebar","previous":{"title":".talon-list Files","permalink":"/Customization/talon_lists"},"next":{"title":"Modules and Contexts","permalink":"/Customization/Talon Framework/modules_and_contexts"}}');var i=t(4848),a=t(8453);const r={sidebar_position:1},s="Overview of Talon framework",l={},c=[];function d(e){const o={a:"a",code:"code",h1:"h1",header:"header",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"overview-of-talon-framework",children:"Overview of Talon framework"})}),"\n",(0,i.jsx)(o.p,{children:"Talon is an accessibility platform that provides a scripting layer to connect a range of input hardware/methods to a cross-platform API for interacting with desktop applications. Let's start by talking about where your configuration/scripting files are stored."}),"\n",(0,i.jsxs)(o.p,{children:["When setting up Talon to respond to voice commands, you should have installed a set of files in your Talon ",(0,i.jsx)(o.code,{children:"user"})," directory (e.g. ",(0,i.jsx)(o.code,{children:"~/.talon/user/"})," in Linux/MacOS). For example, the ",(0,i.jsx)(o.a,{href:"https://github.com/talonhub/community",children:"Talon Community"})," user file set is the most common starting point. All of your Talon configuration/scripts go in this ",(0,i.jsx)(o.code,{children:"user"})," directory and are formatted as either Talon (",(0,i.jsx)(o.code,{children:".talon"}),") or Python (",(0,i.jsx)(o.code,{children:".py"}),") files."]}),"\n",(0,i.jsxs)(o.p,{children:["Talon doesn't care what names you give your ",(0,i.jsx)(o.code,{children:".py"})," or ",(0,i.jsx)(o.code,{children:".talon"})," files, or what folders you put them into; it will automatically try to load everything inside your ",(0,i.jsx)(o.code,{children:"user"})," folder when it starts up. Any folders or file names you see in Talon user file sets (e.g. ",(0,i.jsx)(o.a,{href:"https://github.com/talonhub/community",children:"Talon Community"}),") were chosen by the authors of that package. Talon also monitors files in the ",(0,i.jsx)(o.code,{children:"user"})," directory, and will automatically reload them if they're changed by printing a log message. This reloading is convenient when working on scripts/configuration as you generally don't have to restart Talon for it to pick up changes."]}),"\n",(0,i.jsxs)(o.p,{children:["So why do we have two kinds of configuration/scripting files (",(0,i.jsx)(o.code,{children:".py"})," and ",(0,i.jsx)(o.code,{children:".talon"}),")? Originally all Talon configuration/scripting was done using Python, but over time it was decided that the addition of a framework specific file type would be beneficial. To a first approximation ",(0,i.jsx)(o.code,{children:".talon"})," files provide a succinct way of mapping spoken commands to behaviour. ",(0,i.jsx)(o.code,{children:".py"})," files on the other hand provide the implementation of behaviour and other functionality used by .talon files."]}),"\n",(0,i.jsx)(o.h1,{id:"talon-concepts",children:"Talon Concepts"}),"\n",(0,i.jsx)(o.p,{children:"In order to script Talon it is useful to understand the abstractions it uses. Let's start by giving you a brief overview of how they fit together."}),"\n",(0,i.jsxs)(o.p,{children:["The first concept is the ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/modules_and_contexts",children:"Module"}),". This is used to group behavior like settings, actions, or tags."]}),"\n",(0,i.jsxs)(o.p,{children:["The ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/modules_and_contexts",children:"Context"})," is a central feature of the Talon framework. A context is the circumstances under which a set of behaviour applies. For example we might only activate some voice commands when the title of the currently focussed window matches a given pattern. The concepts of ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/tags",children:"Tags"})," and ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/apps",children:"Apps"}),", and less commonly ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/modes",children:"Modes"})," and ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/scopes",children:"Scopes"})," are all ways of providing information to match against in a Context."]}),"\n",(0,i.jsxs)(o.p,{children:["The next key component is the implementation of behaviour via ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/actions",children:"Actions"}),". Two examples are moving the mouse cursor and pasting the contents of the clipboard. Talon comes with some built in actions, but most are defined and implemented in user scripts."]}),"\n",(0,i.jsxs)(o.p,{children:["One of the primary modes of input to Talon is through voice commands defined in ",(0,i.jsx)(o.code,{children:".talon"})," files. To implement commands containing dynamic 'variables' (e.g. 'allcaps some arbitrary words') you can utilize ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/lists",children:"Lists and captures"})]}),"\n",(0,i.jsxs)(o.p,{children:["In addition to the above we also have the concept of ",(0,i.jsx)(o.a,{href:"/Customization/Talon%20Framework/settings",children:"Settings"}),". Built-in and custom settings are used by actions to configure their behaviour (e.g. to change the delay between key presses in the ",(0,i.jsx)(o.code,{children:"insert()"})," action)."]})]})}function h(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>r,x:()=>s});var n=t(6540);const i={},a=n.createContext(i);function r(e){const o=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function s(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:o},e.children)}}}]);