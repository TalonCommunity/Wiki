"use strict";(self.webpackChunktalon_wiki=self.webpackChunktalon_wiki||[]).push([[7456],{7234:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"Voice Coding/language-specific","title":"Miscellaneous Language Specific Commands","description":"The community lang directory contains folders implementing support for specific programming languages. In the .talon file named after the programming language, you will see several tags activated. These tags activate programming commands whose behavior depends on the active programming language. Descriptions of the commands activated by these tags are available below.","source":"@site/docs/Voice Coding/language-specific.md","sourceDirName":"Voice Coding","slug":"/Voice Coding/language-specific","permalink":"/Voice Coding/language-specific","draft":false,"unlisted":false,"editUrl":"https://github.com/TalonCommunity/Wiki/edit/main/docs/Voice Coding/language-specific.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"VoiceCodeSidebar","previous":{"title":"Snippets","permalink":"/Voice Coding/snippets"},"next":{"title":"Symbols","permalink":"/Voice Coding/symbols"}}');var o=t(4848),s=t(8453);const a={sidebar_position:5},c="Miscellaneous Language Specific Commands",r={},d=[{value:"user.code_data_bool",id:"usercode_data_bool",level:2},{value:"user.code_object_oriented",id:"usercode_object_oriented",level:2},{value:"user.code_functions_common",id:"usercode_functions_common",level:2},{value:"user.code_data_null",id:"usercode_data_null",level:2},{value:"user.code_functions",id:"usercode_functions",level:2},{value:"user.code_keywords",id:"usercode_keywords",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"miscellaneous-language-specific-commands",children:"Miscellaneous Language Specific Commands"})}),"\n",(0,o.jsxs)(n.p,{children:["The community ",(0,o.jsx)(n.a,{href:"https://github.com/talonhub/community/tree/main/lang",children:"lang directory"})," contains folders implementing support for specific programming languages. In the .talon file named after the programming language, you will see several tags activated. These tags activate programming commands whose behavior depends on the active programming language. Descriptions of the commands activated by these tags are available below."]}),"\n",(0,o.jsxs)(n.p,{children:["This page leaves out functionality that is now better done with ",(0,o.jsx)(n.a,{href:"/Voice%20Coding/snippets",children:"snippets"})," than the tag based grammar. For many languages, you will find additional language specific functionality in the language .talon and .py files."]}),"\n",(0,o.jsx)(n.h2,{id:"usercode_data_bool",children:"user.code_data_bool"}),"\n",(0,o.jsxs)(n.p,{children:["This activates the commands ",(0,o.jsx)(n.code,{children:"state true"})," and ",(0,o.jsx)(n.code,{children:"state false"})," for inserting true and false boolean literals respectively."]}),"\n",(0,o.jsx)(n.h2,{id:"usercode_object_oriented",children:"user.code_object_oriented"}),"\n",(0,o.jsxs)(n.p,{children:["This activates the commands ",(0,o.jsx)(n.code,{children:"state self"})," for inserting the language equivalent of the keyword for referring to the containing class and ",(0,o.jsx)(n.code,{children:"self dot"}),", which does the equivalent of ",(0,o.jsx)(n.code,{children:"state self"})," and inserting the object accessor operator (which is a dot in most languages)."]}),"\n",(0,o.jsx)(n.h2,{id:"usercode_functions_common",children:"user.code_functions_common"}),"\n",(0,o.jsxs)(n.p,{children:["This activates support for quickly inserting calls to commonly used functions in the syntax of the active language. ",(0,o.jsx)(n.code,{children:"toggle funk"})," toggles showing available common functions with associated numbers. ",(0,o.jsx)(n.code,{children:"funk <user.code_common_function>"})," will insert the specified function call. ",(0,o.jsx)(n.code,{children:"funk wrap <user.code_common_function>"})," wraps the currently selected text inside the function call. While the available common functions are being displayed, ",(0,o.jsx)(n.code,{children:"funk cell <number>"})," and ",(0,o.jsx)(n.code,{children:"funk wrap <number>"})," can be used for calling a function or wrapping the selected text with a function call using the displayed function number instead of its name."]}),"\n",(0,o.jsx)(n.h2,{id:"usercode_data_null",children:"user.code_data_null"}),"\n",(0,o.jsxs)(n.p,{children:["This activates commands for dealing with null/none. ",(0,o.jsx)(n.code,{children:"state (no | none | nil | null)"})," inserts the language specific representation of null/none. ",(0,o.jsx)(n.code,{children:"is not (none | null)"})," inserts the language specific inequality comparison operator followed by the representation of null/none. ",(0,o.jsx)(n.code,{children:"is (none | null)"})," inserts the language specific equality comparison operator followed by the representation of null/none."]}),"\n",(0,o.jsx)(n.h2,{id:"usercode_functions",children:"user.code_functions"}),"\n",(0,o.jsxs)(n.p,{children:["This activates commands related to types and functions. ",(0,o.jsx)(n.code,{children:"type <user.code_type>"})," inserts the specified data type. For instance when editing Python, saying ",(0,o.jsx)(n.code,{children:"type integer"})," inserts ",(0,o.jsx)(n.code,{children:"int"}),". For languages where a type annotation goes after the variable, ",(0,o.jsx)(n.code,{children:"is type <user.code_type>"})," inserts the type annotation for the specified data type. For languages where a return type annotation is put somewhere after the function name, ",(0,o.jsx)(n.code,{children:"returns [type] <user.code_type>"})," inserts a function return type notation for the specified data type."]}),"\n",(0,o.jsx)(n.h2,{id:"usercode_keywords",children:"user.code_keywords"}),"\n",(0,o.jsxs)(n.p,{children:["This activates support for dictating language keywords. ",(0,o.jsx)(n.code,{children:"put <user.code_keyword>+"})," inserts the specified keywords. Keywords in the ",(0,o.jsx)(n.code,{children:"user.code_keyword_unprefixed"})," list can be dictated without the put prefix. You can see the contents of the prefixed and unprefixed keyword lists for the active language with the commands ",(0,o.jsx)(n.code,{children:"help keywords"})," and ",(0,o.jsx)(n.code,{children:"help keywords unprefixed"})," respectively."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);